// @ts-nocheck


// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getEvent(id: string) : Promise<Result<Event | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_event", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listEvents(filter: ListEventFilter | null) : Promise<Result<Event[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_events", { filter }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCalendar(calendarId: string) : Promise<Result<Calendar | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_calendar", { calendarId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listCalendars(userId: string) : Promise<Result<Calendar[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_calendars", { userId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertCalendar(calendar: Calendar) : Promise<Result<Calendar, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_calendar", { calendar }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async toggleCalendarSelected(trackingId: string) : Promise<Result<Calendar, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|toggle_calendar_selected", { trackingId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertSession(session: Session) : Promise<Result<Session, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_session", { session }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async visitSession(id: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|visit_session", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listTemplates() : Promise<Result<Template[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_templates") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertTemplate(template: Template) : Promise<Result<Template, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_template", { template }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteTemplate(id: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|delete_template", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async onboardingSessionId() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|onboarding_session_id") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async thankYouSessionId() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|thank_you_session_id") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listSessions(filter: ListSessionFilter | null) : Promise<Result<Session[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_sessions", { filter }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteSession(id: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|delete_session", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSession(filter: GetSessionFilter) : Promise<Result<Session | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_session", { filter }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setSessionEvent(sessionId: string, eventId: string | null) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|set_session_event", { sessionId, eventId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async sessionAddParticipant(sessionId: string, humanId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|session_add_participant", { sessionId, humanId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async sessionListDeletedParticipantIds(sessionId: string) : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|session_list_deleted_participant_ids", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async sessionRemoveParticipant(sessionId: string, humanId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|session_remove_participant", { sessionId, humanId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async sessionListParticipants(sessionId: string) : Promise<Result<Human[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|session_list_participants", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async sessionGetEvent(sessionId: string) : Promise<Result<Event | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|session_get_event", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getWords(sessionId: string) : Promise<Result<Word2[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_words", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getWordsOnboarding() : Promise<Result<Word2[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_words_onboarding") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getConfig() : Promise<Result<Config, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_config") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setConfig(config: Config) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|set_config", { config }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getHuman(id: string) : Promise<Result<Human | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_human", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertHuman(human: Human) : Promise<Result<Human, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_human", { human }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listHumans(filter: ListHumanFilter | null) : Promise<Result<Human[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_humans", { filter }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteHuman(id: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|delete_human", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getOrganization(id: string) : Promise<Result<Organization | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_organization", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteOrganization(id: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|delete_organization", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getOrganizationByUserId(userId: string) : Promise<Result<Organization | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|get_organization_by_user_id", { userId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertOrganization(organization: Organization) : Promise<Result<Organization, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_organization", { organization }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listOrganizations(filter: ListOrganizationFilter | null) : Promise<Result<Organization[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_organizations", { filter }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listOrganizationMembers(organizationId: string) : Promise<Result<Human[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_organization_members", { organizationId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listChatGroups(sessionId: string) : Promise<Result<ChatGroup[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_chat_groups", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listChatMessages(groupId: string) : Promise<Result<ChatMessage[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_chat_messages", { groupId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createChatGroup(group: ChatGroup) : Promise<Result<ChatGroup, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|create_chat_group", { group }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertChatMessage(message: ChatMessage) : Promise<Result<ChatMessage, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_chat_message", { message }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteChatMessages(groupId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|delete_chat_messages", { groupId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listAllTags() : Promise<Result<Tag[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_all_tags") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listSessionTags(sessionId: string) : Promise<Result<Tag[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_session_tags", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async assignTagToSession(tagId: string, sessionId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|assign_tag_to_session", { tagId, sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async unassignTagFromSession(tagId: string, sessionId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|unassign_tag_from_session", { tagId, sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async upsertTag(tag: Tag) : Promise<Result<Tag, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|upsert_tag", { tag }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteTag(tagId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|delete_tag", { tagId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createConversation(conversation: ChatConversation) : Promise<Result<ChatConversation, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|create_conversation", { conversation }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listConversations(sessionId: string) : Promise<Result<ChatConversation[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_conversations", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createMessageV2(message: ChatMessageV2) : Promise<Result<ChatMessageV2, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|create_message_v2", { message }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listMessagesV2(conversationId: string) : Promise<Result<ChatMessageV2[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|list_messages_v2", { conversationId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateMessageV2Parts(id: string, parts: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:db|update_message_v2_parts", { id, parts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Calendar = { id: string; tracking_id: string; user_id: string; platform: Platform; name: string; selected: boolean; source: string | null }
export type ChatConversation = { id: string; session_id: string; user_id: string; name: string | null; created_at: string; updated_at: string }
export type ChatGroup = { id: string; user_id: string; name: string | null; created_at: string; session_id: string }
export type ChatMessage = { id: string; group_id: string; created_at: string; role: ChatMessageRole; content: string; type: ChatMessageType; tool_details: string | null }
export type ChatMessageRole = "User" | "Assistant"
export type ChatMessageType = "text-delta" | "tool-start" | "tool-result" | "tool-error"
export type ChatMessageV2 = { id: string; conversation_id: string; role: ChatMessageV2Role; parts: string; metadata: string | null; created_at: string; updated_at: string }
export type ChatMessageV2Role = "system" | "user" | "assistant"
export type Config = { id: string; user_id: string; general: ConfigGeneral; notification: ConfigNotification; ai: ConfigAI }
export type ConfigAI = { api_base: string | null; api_key: string | null; ai_specificity: number | null; redemption_time_ms: number | null }
export type ConfigGeneral = { autostart: boolean; display_language: string; spoken_languages?: string[]; jargons?: string[]; telemetry_consent: boolean; save_recordings: boolean | null; selected_template_id: string | null; summary_language?: string }
export type ConfigNotification = { before: boolean; auto: boolean; ignoredPlatforms: string[] | null }
export type Event = { id: string; user_id: string; tracking_id: string; calendar_id: string | null; name: string; note: string; start_date: string; end_date: string; google_event_url: string | null; participants: string | null; is_recurring: boolean }
export type GetSessionFilter = { id: string } | { calendarEventId: string } | { tagId: string }
export type Human = { id: string; organization_id: string | null; is_user: boolean; full_name: string | null; email: string | null; job_title: string | null; linkedin_username: string | null }
export type ListEventFilter = ({ user_id: string; limit: number | null }) & ({ type: "simple" } | { type: "search"; query: string } | { type: "dateRange"; start: string; end: string } | { type: "not-assigned-past" })
export type ListHumanFilter = { search: [number, string] }
export type ListOrganizationFilter = { search: [number, string] }
export type ListSessionFilter = ({ user_id: string; limit: number | null }) & ({ type: "search"; query: string } | { type: "recentlyVisited" } | { type: "dateRange"; start: string; end: string } | { type: "tagFilter"; tag_ids: string[] })
export type Organization = { id: string; name: string; description: string | null }
export type Platform = "Apple" | "Google" | "Outlook"
export type Session = { id: string; created_at: string; visited_at: string; user_id: string; calendar_event_id: string | null; title: string; raw_memo_html: string; enhanced_memo_html: string | null; words: Word2[]; record_start: string | null; record_end: string | null; pre_meeting_memo_html: string | null }
export type SpeakerIdentity = { type: "unassigned"; value: { index: number } } | { type: "assigned"; value: { id: string; label: string } }
export type Tag = { id: string; name: string }
export type Template = { id: string; user_id: string; title: string; description: string; sections: TemplateSection[]; tags: string[]; context_option: string | null }
export type TemplateSection = { title: string; description: string }
export type Word2 = { text: string; speaker: SpeakerIdentity | null; confidence: number | null; start_ms: number | null; end_ms: number | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
