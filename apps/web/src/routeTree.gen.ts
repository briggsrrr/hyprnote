/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as ViewRouteRouteImport } from './routes/_view/route'
import { Route as ViewIndexRouteImport } from './routes/_view/index'
import { Route as WebhookStripeRouteImport } from './routes/webhook/stripe'
import { Route as WebhookNangoRouteImport } from './routes/webhook/nango'
import { Route as ViewPricingRouteImport } from './routes/_view/pricing'
import { Route as ViewDownloadsRouteImport } from './routes/_view/downloads'
import { Route as ViewAppRouteRouteImport } from './routes/_view/app/route'
import { Route as ViewChangelogIndexRouteImport } from './routes/_view/changelog/index'
import { Route as ViewBlogIndexRouteImport } from './routes/_view/blog/index'
import { Route as ViewAppIndexRouteImport } from './routes/_view/app/index'
import { Route as ApiSyncWriteRouteImport } from './routes/api/sync.write'
import { Route as ApiSyncReadRouteImport } from './routes/api/sync.read'
import { Route as ViewChangelogSlugRouteImport } from './routes/_view/changelog/$slug'
import { Route as ViewCallbackAuthRouteImport } from './routes/_view/callback/auth'
import { Route as ViewBlogSlugRouteImport } from './routes/_view/blog/$slug'
import { Route as ViewAppIntegrationRouteImport } from './routes/_view/app/integration'
import { Route as ViewAppAccountRouteImport } from './routes/_view/app/account'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewRouteRoute = ViewRouteRouteImport.update({
  id: '/_view',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewIndexRoute = ViewIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ViewRouteRoute,
} as any)
const WebhookStripeRoute = WebhookStripeRouteImport.update({
  id: '/webhook/stripe',
  path: '/webhook/stripe',
  getParentRoute: () => rootRouteImport,
} as any)
const WebhookNangoRoute = WebhookNangoRouteImport.update({
  id: '/webhook/nango',
  path: '/webhook/nango',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewPricingRoute = ViewPricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewDownloadsRoute = ViewDownloadsRouteImport.update({
  id: '/downloads',
  path: '/downloads',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewAppRouteRoute = ViewAppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewChangelogIndexRoute = ViewChangelogIndexRouteImport.update({
  id: '/changelog/',
  path: '/changelog/',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewBlogIndexRoute = ViewBlogIndexRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewAppIndexRoute = ViewAppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ViewAppRouteRoute,
} as any)
const ApiSyncWriteRoute = ApiSyncWriteRouteImport.update({
  id: '/api/sync/write',
  path: '/api/sync/write',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSyncReadRoute = ApiSyncReadRouteImport.update({
  id: '/api/sync/read',
  path: '/api/sync/read',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewChangelogSlugRoute = ViewChangelogSlugRouteImport.update({
  id: '/changelog/$slug',
  path: '/changelog/$slug',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewCallbackAuthRoute = ViewCallbackAuthRouteImport.update({
  id: '/callback/auth',
  path: '/callback/auth',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewBlogSlugRoute = ViewBlogSlugRouteImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewAppIntegrationRoute = ViewAppIntegrationRouteImport.update({
  id: '/integration',
  path: '/integration',
  getParentRoute: () => ViewAppRouteRoute,
} as any)
const ViewAppAccountRoute = ViewAppAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => ViewAppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/app': typeof ViewAppRouteRouteWithChildren
  '/downloads': typeof ViewDownloadsRoute
  '/pricing': typeof ViewPricingRoute
  '/webhook/nango': typeof WebhookNangoRoute
  '/webhook/stripe': typeof WebhookStripeRoute
  '/': typeof ViewIndexRoute
  '/app/account': typeof ViewAppAccountRoute
  '/app/integration': typeof ViewAppIntegrationRoute
  '/blog/$slug': typeof ViewBlogSlugRoute
  '/callback/auth': typeof ViewCallbackAuthRoute
  '/changelog/$slug': typeof ViewChangelogSlugRoute
  '/api/sync/read': typeof ApiSyncReadRoute
  '/api/sync/write': typeof ApiSyncWriteRoute
  '/app/': typeof ViewAppIndexRoute
  '/blog': typeof ViewBlogIndexRoute
  '/changelog': typeof ViewChangelogIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/downloads': typeof ViewDownloadsRoute
  '/pricing': typeof ViewPricingRoute
  '/webhook/nango': typeof WebhookNangoRoute
  '/webhook/stripe': typeof WebhookStripeRoute
  '/': typeof ViewIndexRoute
  '/app/account': typeof ViewAppAccountRoute
  '/app/integration': typeof ViewAppIntegrationRoute
  '/blog/$slug': typeof ViewBlogSlugRoute
  '/callback/auth': typeof ViewCallbackAuthRoute
  '/changelog/$slug': typeof ViewChangelogSlugRoute
  '/api/sync/read': typeof ApiSyncReadRoute
  '/api/sync/write': typeof ApiSyncWriteRoute
  '/app': typeof ViewAppIndexRoute
  '/blog': typeof ViewBlogIndexRoute
  '/changelog': typeof ViewChangelogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_view': typeof ViewRouteRouteWithChildren
  '/auth': typeof AuthRoute
  '/_view/app': typeof ViewAppRouteRouteWithChildren
  '/_view/downloads': typeof ViewDownloadsRoute
  '/_view/pricing': typeof ViewPricingRoute
  '/webhook/nango': typeof WebhookNangoRoute
  '/webhook/stripe': typeof WebhookStripeRoute
  '/_view/': typeof ViewIndexRoute
  '/_view/app/account': typeof ViewAppAccountRoute
  '/_view/app/integration': typeof ViewAppIntegrationRoute
  '/_view/blog/$slug': typeof ViewBlogSlugRoute
  '/_view/callback/auth': typeof ViewCallbackAuthRoute
  '/_view/changelog/$slug': typeof ViewChangelogSlugRoute
  '/api/sync/read': typeof ApiSyncReadRoute
  '/api/sync/write': typeof ApiSyncWriteRoute
  '/_view/app/': typeof ViewAppIndexRoute
  '/_view/blog/': typeof ViewBlogIndexRoute
  '/_view/changelog/': typeof ViewChangelogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/app'
    | '/downloads'
    | '/pricing'
    | '/webhook/nango'
    | '/webhook/stripe'
    | '/'
    | '/app/account'
    | '/app/integration'
    | '/blog/$slug'
    | '/callback/auth'
    | '/changelog/$slug'
    | '/api/sync/read'
    | '/api/sync/write'
    | '/app/'
    | '/blog'
    | '/changelog'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/downloads'
    | '/pricing'
    | '/webhook/nango'
    | '/webhook/stripe'
    | '/'
    | '/app/account'
    | '/app/integration'
    | '/blog/$slug'
    | '/callback/auth'
    | '/changelog/$slug'
    | '/api/sync/read'
    | '/api/sync/write'
    | '/app'
    | '/blog'
    | '/changelog'
  id:
    | '__root__'
    | '/_view'
    | '/auth'
    | '/_view/app'
    | '/_view/downloads'
    | '/_view/pricing'
    | '/webhook/nango'
    | '/webhook/stripe'
    | '/_view/'
    | '/_view/app/account'
    | '/_view/app/integration'
    | '/_view/blog/$slug'
    | '/_view/callback/auth'
    | '/_view/changelog/$slug'
    | '/api/sync/read'
    | '/api/sync/write'
    | '/_view/app/'
    | '/_view/blog/'
    | '/_view/changelog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ViewRouteRoute: typeof ViewRouteRouteWithChildren
  AuthRoute: typeof AuthRoute
  WebhookNangoRoute: typeof WebhookNangoRoute
  WebhookStripeRoute: typeof WebhookStripeRoute
  ApiSyncReadRoute: typeof ApiSyncReadRoute
  ApiSyncWriteRoute: typeof ApiSyncWriteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_view': {
      id: '/_view'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ViewRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_view/': {
      id: '/_view/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ViewIndexRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/webhook/stripe': {
      id: '/webhook/stripe'
      path: '/webhook/stripe'
      fullPath: '/webhook/stripe'
      preLoaderRoute: typeof WebhookStripeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/webhook/nango': {
      id: '/webhook/nango'
      path: '/webhook/nango'
      fullPath: '/webhook/nango'
      preLoaderRoute: typeof WebhookNangoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_view/pricing': {
      id: '/_view/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof ViewPricingRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/downloads': {
      id: '/_view/downloads'
      path: '/downloads'
      fullPath: '/downloads'
      preLoaderRoute: typeof ViewDownloadsRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/app': {
      id: '/_view/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof ViewAppRouteRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/changelog/': {
      id: '/_view/changelog/'
      path: '/changelog'
      fullPath: '/changelog'
      preLoaderRoute: typeof ViewChangelogIndexRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/blog/': {
      id: '/_view/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof ViewBlogIndexRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/app/': {
      id: '/_view/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof ViewAppIndexRouteImport
      parentRoute: typeof ViewAppRouteRoute
    }
    '/api/sync/write': {
      id: '/api/sync/write'
      path: '/api/sync/write'
      fullPath: '/api/sync/write'
      preLoaderRoute: typeof ApiSyncWriteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/sync/read': {
      id: '/api/sync/read'
      path: '/api/sync/read'
      fullPath: '/api/sync/read'
      preLoaderRoute: typeof ApiSyncReadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_view/changelog/$slug': {
      id: '/_view/changelog/$slug'
      path: '/changelog/$slug'
      fullPath: '/changelog/$slug'
      preLoaderRoute: typeof ViewChangelogSlugRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/callback/auth': {
      id: '/_view/callback/auth'
      path: '/callback/auth'
      fullPath: '/callback/auth'
      preLoaderRoute: typeof ViewCallbackAuthRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/blog/$slug': {
      id: '/_view/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof ViewBlogSlugRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/app/integration': {
      id: '/_view/app/integration'
      path: '/integration'
      fullPath: '/app/integration'
      preLoaderRoute: typeof ViewAppIntegrationRouteImport
      parentRoute: typeof ViewAppRouteRoute
    }
    '/_view/app/account': {
      id: '/_view/app/account'
      path: '/account'
      fullPath: '/app/account'
      preLoaderRoute: typeof ViewAppAccountRouteImport
      parentRoute: typeof ViewAppRouteRoute
    }
  }
}

interface ViewAppRouteRouteChildren {
  ViewAppAccountRoute: typeof ViewAppAccountRoute
  ViewAppIntegrationRoute: typeof ViewAppIntegrationRoute
  ViewAppIndexRoute: typeof ViewAppIndexRoute
}

const ViewAppRouteRouteChildren: ViewAppRouteRouteChildren = {
  ViewAppAccountRoute: ViewAppAccountRoute,
  ViewAppIntegrationRoute: ViewAppIntegrationRoute,
  ViewAppIndexRoute: ViewAppIndexRoute,
}

const ViewAppRouteRouteWithChildren = ViewAppRouteRoute._addFileChildren(
  ViewAppRouteRouteChildren,
)

interface ViewRouteRouteChildren {
  ViewAppRouteRoute: typeof ViewAppRouteRouteWithChildren
  ViewDownloadsRoute: typeof ViewDownloadsRoute
  ViewPricingRoute: typeof ViewPricingRoute
  ViewIndexRoute: typeof ViewIndexRoute
  ViewBlogSlugRoute: typeof ViewBlogSlugRoute
  ViewCallbackAuthRoute: typeof ViewCallbackAuthRoute
  ViewChangelogSlugRoute: typeof ViewChangelogSlugRoute
  ViewBlogIndexRoute: typeof ViewBlogIndexRoute
  ViewChangelogIndexRoute: typeof ViewChangelogIndexRoute
}

const ViewRouteRouteChildren: ViewRouteRouteChildren = {
  ViewAppRouteRoute: ViewAppRouteRouteWithChildren,
  ViewDownloadsRoute: ViewDownloadsRoute,
  ViewPricingRoute: ViewPricingRoute,
  ViewIndexRoute: ViewIndexRoute,
  ViewBlogSlugRoute: ViewBlogSlugRoute,
  ViewCallbackAuthRoute: ViewCallbackAuthRoute,
  ViewChangelogSlugRoute: ViewChangelogSlugRoute,
  ViewBlogIndexRoute: ViewBlogIndexRoute,
  ViewChangelogIndexRoute: ViewChangelogIndexRoute,
}

const ViewRouteRouteWithChildren = ViewRouteRoute._addFileChildren(
  ViewRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ViewRouteRoute: ViewRouteRouteWithChildren,
  AuthRoute: AuthRoute,
  WebhookNangoRoute: WebhookNangoRoute,
  WebhookStripeRoute: WebhookStripeRoute,
  ApiSyncReadRoute: ApiSyncReadRoute,
  ApiSyncWriteRoute: ApiSyncWriteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
