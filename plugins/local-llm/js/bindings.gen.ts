// @ts-nocheck


// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async modelsDir() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|models_dir") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listSupportedModel() : Promise<Result<ModelInfo[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|list_supported_model") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async isServerRunning() : Promise<boolean> {
    return await TAURI_INVOKE("plugin:local-llm|is_server_running");
},
async isModelDownloaded(model: SupportedModel) : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|is_model_downloaded", { model }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async isModelDownloading(model: SupportedModel) : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|is_model_downloading", { model }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async downloadModel(model: SupportedModel, channel: TAURI_CHANNEL<number>) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|download_model", { model, channel }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startServer() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|start_server") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopServer() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|stop_server") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async restartServer() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|restart_server") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCurrentModel() : Promise<Result<SupportedModel, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|get_current_model") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setCurrentModel(model: SupportedModel) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|set_current_model", { model }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listDownloadedModel() : Promise<Result<SupportedModel[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|list_downloaded_model") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listCustomModels() : Promise<Result<CustomModelInfo[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|list_custom_models") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCurrentModelSelection() : Promise<Result<ModelSelection, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|get_current_model_selection") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setCurrentModelSelection(model: ModelSelection) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:local-llm|set_current_model_selection", { model }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
llmEvent: LLMEvent
}>({
llmEvent: "plugin:local-llm:llm-event"
})

/** user-defined constants **/



/** user-defined types **/

export type CustomModelInfo = { path: string; name: string }
export type LLMEvent = { progress: number }
export type ModelInfo = { key: SupportedModel; name: string; description: string; size_bytes: number }
export type ModelSelection = { type: "Predefined"; content: { key: SupportedModel } } | { type: "Custom"; content: { path: string } }
export type SupportedModel = "Llama3p2_3bQ4" | "Gemma3_4bQ4" | "HyprLLM"
export type TAURI_CHANNEL<TSend> = null

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
