/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WebhookNangoRouteImport } from './routes/webhook/nango'
import { Route as CallbackAuthRouteImport } from './routes/callback/auth'
import { Route as ViewLayoutRouteRouteImport } from './routes/_view/_layout/route'
import { Route as ViewLayoutIndexRouteImport } from './routes/_view/_layout/index'
import { Route as ApiSyncWriteRouteImport } from './routes/api/sync.write'
import { Route as ApiSyncReadRouteImport } from './routes/api/sync.read'
import { Route as ApiChatCompletionsRouteImport } from './routes/api/chat.completions'
import { Route as ViewLayoutPricingRouteImport } from './routes/_view/_layout/pricing'
import { Route as ViewLayoutAppRouteRouteImport } from './routes/_view/_layout/app/route'
import { Route as ViewLayoutAppIndexRouteImport } from './routes/_view/_layout/app/index'
import { Route as ViewLayoutAppIntegrationRouteImport } from './routes/_view/_layout/app/integration'
import { Route as ViewLayoutAppAuthRouteImport } from './routes/_view/_layout/app/auth'

const WebhookNangoRoute = WebhookNangoRouteImport.update({
  id: '/webhook/nango',
  path: '/webhook/nango',
  getParentRoute: () => rootRouteImport,
} as any)
const CallbackAuthRoute = CallbackAuthRouteImport.update({
  id: '/callback/auth',
  path: '/callback/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewLayoutRouteRoute = ViewLayoutRouteRouteImport.update({
  id: '/_view/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewLayoutIndexRoute = ViewLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ViewLayoutRouteRoute,
} as any)
const ApiSyncWriteRoute = ApiSyncWriteRouteImport.update({
  id: '/api/sync/write',
  path: '/api/sync/write',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSyncReadRoute = ApiSyncReadRouteImport.update({
  id: '/api/sync/read',
  path: '/api/sync/read',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiChatCompletionsRoute = ApiChatCompletionsRouteImport.update({
  id: '/api/chat/completions',
  path: '/api/chat/completions',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewLayoutPricingRoute = ViewLayoutPricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => ViewLayoutRouteRoute,
} as any)
const ViewLayoutAppRouteRoute = ViewLayoutAppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => ViewLayoutRouteRoute,
} as any)
const ViewLayoutAppIndexRoute = ViewLayoutAppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ViewLayoutAppRouteRoute,
} as any)
const ViewLayoutAppIntegrationRoute =
  ViewLayoutAppIntegrationRouteImport.update({
    id: '/integration',
    path: '/integration',
    getParentRoute: () => ViewLayoutAppRouteRoute,
  } as any)
const ViewLayoutAppAuthRoute = ViewLayoutAppAuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => ViewLayoutAppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/callback/auth': typeof CallbackAuthRoute
  '/webhook/nango': typeof WebhookNangoRoute
  '/app': typeof ViewLayoutAppRouteRouteWithChildren
  '/pricing': typeof ViewLayoutPricingRoute
  '/api/chat/completions': typeof ApiChatCompletionsRoute
  '/api/sync/read': typeof ApiSyncReadRoute
  '/api/sync/write': typeof ApiSyncWriteRoute
  '/': typeof ViewLayoutIndexRoute
  '/app/auth': typeof ViewLayoutAppAuthRoute
  '/app/integration': typeof ViewLayoutAppIntegrationRoute
  '/app/': typeof ViewLayoutAppIndexRoute
}
export interface FileRoutesByTo {
  '/callback/auth': typeof CallbackAuthRoute
  '/webhook/nango': typeof WebhookNangoRoute
  '/pricing': typeof ViewLayoutPricingRoute
  '/api/chat/completions': typeof ApiChatCompletionsRoute
  '/api/sync/read': typeof ApiSyncReadRoute
  '/api/sync/write': typeof ApiSyncWriteRoute
  '/': typeof ViewLayoutIndexRoute
  '/app/auth': typeof ViewLayoutAppAuthRoute
  '/app/integration': typeof ViewLayoutAppIntegrationRoute
  '/app': typeof ViewLayoutAppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_view/_layout': typeof ViewLayoutRouteRouteWithChildren
  '/callback/auth': typeof CallbackAuthRoute
  '/webhook/nango': typeof WebhookNangoRoute
  '/_view/_layout/app': typeof ViewLayoutAppRouteRouteWithChildren
  '/_view/_layout/pricing': typeof ViewLayoutPricingRoute
  '/api/chat/completions': typeof ApiChatCompletionsRoute
  '/api/sync/read': typeof ApiSyncReadRoute
  '/api/sync/write': typeof ApiSyncWriteRoute
  '/_view/_layout/': typeof ViewLayoutIndexRoute
  '/_view/_layout/app/auth': typeof ViewLayoutAppAuthRoute
  '/_view/_layout/app/integration': typeof ViewLayoutAppIntegrationRoute
  '/_view/_layout/app/': typeof ViewLayoutAppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/callback/auth'
    | '/webhook/nango'
    | '/app'
    | '/pricing'
    | '/api/chat/completions'
    | '/api/sync/read'
    | '/api/sync/write'
    | '/'
    | '/app/auth'
    | '/app/integration'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/callback/auth'
    | '/webhook/nango'
    | '/pricing'
    | '/api/chat/completions'
    | '/api/sync/read'
    | '/api/sync/write'
    | '/'
    | '/app/auth'
    | '/app/integration'
    | '/app'
  id:
    | '__root__'
    | '/_view/_layout'
    | '/callback/auth'
    | '/webhook/nango'
    | '/_view/_layout/app'
    | '/_view/_layout/pricing'
    | '/api/chat/completions'
    | '/api/sync/read'
    | '/api/sync/write'
    | '/_view/_layout/'
    | '/_view/_layout/app/auth'
    | '/_view/_layout/app/integration'
    | '/_view/_layout/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ViewLayoutRouteRoute: typeof ViewLayoutRouteRouteWithChildren
  CallbackAuthRoute: typeof CallbackAuthRoute
  WebhookNangoRoute: typeof WebhookNangoRoute
  ApiChatCompletionsRoute: typeof ApiChatCompletionsRoute
  ApiSyncReadRoute: typeof ApiSyncReadRoute
  ApiSyncWriteRoute: typeof ApiSyncWriteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/webhook/nango': {
      id: '/webhook/nango'
      path: '/webhook/nango'
      fullPath: '/webhook/nango'
      preLoaderRoute: typeof WebhookNangoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/callback/auth': {
      id: '/callback/auth'
      path: '/callback/auth'
      fullPath: '/callback/auth'
      preLoaderRoute: typeof CallbackAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_view/_layout': {
      id: '/_view/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ViewLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_view/_layout/': {
      id: '/_view/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ViewLayoutIndexRouteImport
      parentRoute: typeof ViewLayoutRouteRoute
    }
    '/api/sync/write': {
      id: '/api/sync/write'
      path: '/api/sync/write'
      fullPath: '/api/sync/write'
      preLoaderRoute: typeof ApiSyncWriteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/sync/read': {
      id: '/api/sync/read'
      path: '/api/sync/read'
      fullPath: '/api/sync/read'
      preLoaderRoute: typeof ApiSyncReadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/chat/completions': {
      id: '/api/chat/completions'
      path: '/api/chat/completions'
      fullPath: '/api/chat/completions'
      preLoaderRoute: typeof ApiChatCompletionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_view/_layout/pricing': {
      id: '/_view/_layout/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof ViewLayoutPricingRouteImport
      parentRoute: typeof ViewLayoutRouteRoute
    }
    '/_view/_layout/app': {
      id: '/_view/_layout/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof ViewLayoutAppRouteRouteImport
      parentRoute: typeof ViewLayoutRouteRoute
    }
    '/_view/_layout/app/': {
      id: '/_view/_layout/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof ViewLayoutAppIndexRouteImport
      parentRoute: typeof ViewLayoutAppRouteRoute
    }
    '/_view/_layout/app/integration': {
      id: '/_view/_layout/app/integration'
      path: '/integration'
      fullPath: '/app/integration'
      preLoaderRoute: typeof ViewLayoutAppIntegrationRouteImport
      parentRoute: typeof ViewLayoutAppRouteRoute
    }
    '/_view/_layout/app/auth': {
      id: '/_view/_layout/app/auth'
      path: '/auth'
      fullPath: '/app/auth'
      preLoaderRoute: typeof ViewLayoutAppAuthRouteImport
      parentRoute: typeof ViewLayoutAppRouteRoute
    }
  }
}

interface ViewLayoutAppRouteRouteChildren {
  ViewLayoutAppAuthRoute: typeof ViewLayoutAppAuthRoute
  ViewLayoutAppIntegrationRoute: typeof ViewLayoutAppIntegrationRoute
  ViewLayoutAppIndexRoute: typeof ViewLayoutAppIndexRoute
}

const ViewLayoutAppRouteRouteChildren: ViewLayoutAppRouteRouteChildren = {
  ViewLayoutAppAuthRoute: ViewLayoutAppAuthRoute,
  ViewLayoutAppIntegrationRoute: ViewLayoutAppIntegrationRoute,
  ViewLayoutAppIndexRoute: ViewLayoutAppIndexRoute,
}

const ViewLayoutAppRouteRouteWithChildren =
  ViewLayoutAppRouteRoute._addFileChildren(ViewLayoutAppRouteRouteChildren)

interface ViewLayoutRouteRouteChildren {
  ViewLayoutAppRouteRoute: typeof ViewLayoutAppRouteRouteWithChildren
  ViewLayoutPricingRoute: typeof ViewLayoutPricingRoute
  ViewLayoutIndexRoute: typeof ViewLayoutIndexRoute
}

const ViewLayoutRouteRouteChildren: ViewLayoutRouteRouteChildren = {
  ViewLayoutAppRouteRoute: ViewLayoutAppRouteRouteWithChildren,
  ViewLayoutPricingRoute: ViewLayoutPricingRoute,
  ViewLayoutIndexRoute: ViewLayoutIndexRoute,
}

const ViewLayoutRouteRouteWithChildren = ViewLayoutRouteRoute._addFileChildren(
  ViewLayoutRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ViewLayoutRouteRoute: ViewLayoutRouteRouteWithChildren,
  CallbackAuthRoute: CallbackAuthRoute,
  WebhookNangoRoute: WebhookNangoRoute,
  ApiChatCompletionsRoute: ApiChatCompletionsRoute,
  ApiSyncReadRoute: ApiSyncReadRoute,
  ApiSyncWriteRoute: ApiSyncWriteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
